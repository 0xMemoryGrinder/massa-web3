import { IAccount } from "../../interfaces/IAccount";
import { IClientConfig } from "../../interfaces/IClientConfig";
import { IProvider, ProviderType } from "../../interfaces/IProvider";
import { Client } from "../../web3/Client";
import { INodeStatus } from "../../interfaces/INodeStatus";
import { IAddressInfo, IFullAddressInfo } from "../../interfaces/IAddressInfo";
import * as fs from "fs";
import { CompiledSmartContract, SmartContractsClient, WasmConfig } from "../../web3/SmartContractsClient";
import { IBlockInfo } from "../../interfaces/IBlockInfo";
import { IEndorsement } from "../../interfaces/IEndorsement";
import { IOperationData } from "../../interfaces/IOperationData";
import { IClique } from "../../interfaces/IClique";
import { IStakingAddresses } from "../../interfaces/IStakingAddresses";
import { ClientFactory, DefaultProviderUrls } from "../../web3/ClientFactory";
import { ILatestPeriodInfo } from "../../interfaces/ILatestPeriodInfo";
import { WalletClient } from "../../web3/WalletClient";
import { ITransactionData } from "../../interfaces/ITransactionData";
import { IRollsData } from "../../interfaces/IRollsData";
import { IContractData } from "../../interfaces/IContractData";

const ADDRESSES = {
    currentPlayer: '2PnbfdjnrBPe6LYVixwQtmq6PoGguXiDnZCVCBmcThmt9JwLoF',
    gameState: '2Wo22kCJASiqEu4XSF8YUaP4i5BMwGH2Zaadup9BcYPVaq1eWp',
    smartContract: 'x5hdCdDvEa7fMT1JtfvwvEymaWioeHr6d6DsQEit8cGFGTk4X'
};

const SMART_SIMPLE_CONTRACT = `export function add(x: number, y: number): number { return x+y };` 

const SMART_SIMPLE_CONTRACT_IMPORTS = `
import { print } from "massa-sc-std";
let x = 7;
export function main(_args: string): void {
    print("hello world");
}
function add(x: number, y: number): number { return x+y };
` 

const fee: number = 0
const max_gas: number = 2000000
const gas_price: number = 0
const coins: number = 0
const expire_period: number = 0;
const privateKey: string = "2SPTTLK6Vgk5zmZEkokqC3wgpKgKpyV5Pu3uncEGawoGyd4yzC";
const publicKey: string = "5Jwx18K2JXacFoZcPmTWKFgdG1mSdkpBAUnwiyEqsVP9LKyNxR";
const address: string = "9mvJfA4761u1qT8QwSWcJ4gTDaFP5iSgjQzKMaqTbrWCFo1QM";

(async () => {

    try {

        // ============= CLIENT ================ //
        const baseAccount = {
            publicKey,
            privateKey,
            address
        } as IAccount;

        const providers: Array<IProvider> = [
            {
                url: "http://127.0.0.1:33035",
                type: ProviderType.PUBLIC
            } as IProvider,
            {
                url: "http://127.0.0.1:33034",
                type: ProviderType.PRIVATE
            } as IProvider
        ];

        /*
        const web3ClientConfig = {
            providers,
            retryStrategyOn: false,
        } as IClientConfig;
        const web3Client: Client = new Client(web3ClientConfig, baseAccount);
        */

        const web3Client = ClientFactory.createDefaultClient(DefaultProviderUrls.TESTNET, false, baseAccount);
        
        // ============= PUBLIC API ================ //

        // get latest period
        //const latestPeriodInfo: ILatestPeriodInfo = await web3Client.publicApi().getLatestPeriodInfo();
        //console.log("Latest Period Info", JSON.stringify(latestPeriodInfo, null, 2));

        // get node status
        //const nodeStatus: INodeStatus = await web3Client.publicApi().getNodeStatus();
        //console.log("JSON RPC RESPONSE", JSON.stringify(nodeStatus, null, 2));

        // get block
        //const blocks: Array<IBlockInfo> = await web3Client.publicApi().getBlocks(["nKifcnGbd9zu8nu1hb94XEmMGwgoWbjj3DutzrobeHDdUtEuM"]);
        //console.log("JSON RPC RESPONSE", JSON.stringify(blocks, null, 2));

        // get endorsements
        //const endorsements: Array<IEndorsement> = await web3Client.publicApi().getEndorsements(["q2XVw4HrRfwtX8FGXak2VwtTNkBvYtLVW67s8pTCVPdEEeG6J"]);
        //console.log("JSON RPC RESPONSE", JSON.stringify(endorsements, null, 2));

        // get operations
        //const operations: Array<IOperationData> = await web3Client.publicApi().getOperations(["2G7eVz2mRBniZAhmHwcyGPqRCMn9yE3CQ14LVAHhgm5cyGUZ2F"]);
        //console.log("JSON RPC RESPONSE", JSON.stringify(operations, null, 2));

        // get addresses
        //const addressesResp: Array<IAddressInfo> = await web3Client.publicApi().getAddresses(["2GcahavufBH9tqVH6SjkSCPXRbqpiCwwSfwFAf3veKiJmiHubK"]);
        //console.log("Smart contract addresses", JSON.stringify(addressesResp, null, 2));

        // get cliques
        //const cliques: Array<IClique> = await web3Client.publicApi().getCliques();
        //console.log("JSON RPC RESPONSE", JSON.stringify(cliques, null, 2));

        // get staking addresses
        //const stakers: Array<IStakingAddresses> = await web3Client.publicApi().getStakers();
        //console.log("JSON RPC RESPONSE", JSON.stringify(stakers, null, 2));

        // ============= PRIVATE API ================ //

        // stop node
        //await web3Client.privateApi().nodeStop();

        // ban ip address
        //await web3Client.privateApi().banIpAddress("192.168.1.1");

        // unban ip address
        //await web3Client.privateApi().unbanIpAddress("192.168.1.1");

        // get staking addresses
        //const stakingAddresses = await web3Client.privateApi().nodeGetStakingAddresses();
        //console.log("stakingAddresses", JSON.stringify(stakingAddresses, null, 2));

        // node sign message
        //const message = "hello world";
        //const msgBuf = new TextEncoder().encode(message);
        //const signedMessage = await web3Client.privateApi().nodeSignMessage(msgBuf);
        //console.log("signedMessage", JSON.stringify(signedMessage, null, 2));

        // remove staking addresses
        //await web3Client.privateApi().nodeRemoveStakingAddresses(["2Wo22kCJASiqEu4XSF8YUaP4i5BMwGH2Zaadup9BcYPVaq1eWp"]);

        // add staking private keys
        //await web3Client.privateApi().nodeAddStakingPrivateKeys(["2snKEK1ADWnQX5Mda99riL2kUwy1WjTxWDuCkoExiSC1KPE3vJ"]);

        // ============= WALLET ================ //

        // STATIC: generate new wallet
        //const newWalletAccount = await WalletClient.walletGenerateNewAccount();
        //console.log("new wallet account", JSON.stringify(newWalletAccount, null, 2));

        // STATIC: sign random message
        //const sig = await WalletClient.walletSignMessage("hello", baseAccount);
        //console.log("signature Info", JSON.stringify(sig, null, 2));

        // add account by private key
        //await web3Client.wallet().addPrivateKeysToWallet(["2SPTTLK6Vgk5zmZEkokqC3wgpKgKpyV5Pu3uncEGawoGyd4yzC"]);

        // get all accounts in wallet
        //const walletAccounts = web3Client.wallet().getWalletAccounts();
        //console.log("walletAccounts", JSON.stringify(walletAccounts, null, 2));

        // find account in wallet by address
        //const walletAccount = web3Client.wallet().getWalletAccountByAddress("9mvJfA4761u1qT8QwSWcJ4gTDaFP5iSgjQzKMaqTbrWCFo1QM");
        //console.log("Found walletAccount", JSON.stringify(walletAccount, null, 2));

        // get wallet info
        /*        await web3Client.wallet().addAccountsToWallet(
            [{
                privateKey: "2a4dobJSVb8CN7cQCEL4cfU6xsUNrtwGXQvUPqzUXhEedvzGjc",
                publicKey: "5tdoCo5TwvYZoRjnoqZHDsvff3Z9pXTP1gnEgN9FFS7WWbjjn2",
                address: "yKCRYgv5nVDVwqHmTTXXxqqZW7he3bgEDBQ5bPjBxPkuzAte2"
            }]
        );
        const walletInfo: Array<IFullAddressInfo> = await web3Client.wallet().walletInfo();
        console.log("wallet Info", JSON.stringify(walletInfo, null, 2));
        */

        /*
        const opIds = await web3Client.wallet().sendTransaction({
            fee: 0, // int
            amount: "1", //MAS
            recipientAddress: "yKCRYgv5nVDVwqHmTTXXxqqZW7he3bgEDBQ5bPjBxPkuzAte2"
        } as ITransactionData, baseAccount);
        console.log("operation ids", JSON.stringify(opIds, null, 2));
        */
        
        /*
        const opIds = await web3Client.wallet().buyRolls({
            fee: 0, // int
            amount: 1, //ROLLS
        } as IRollsData, baseAccount);
        console.log("operation ids", JSON.stringify(opIds, null, 2));
        */

        /*
        const opIdsSellRolls = await web3Client.wallet().sellRolls({
            fee: 0, // int
            amount: 1, //ROLLS
        } as IRollsData, baseAccount);
        console.log("operation ids", JSON.stringify(opIdsSellRolls, null, 2));
        */

        
        // ============= SMART CONTRACTS ================ //
        /*
        const compiledSc: CompiledSmartContract = await web3Client.smartContracts().compileSmartContractFromFile({
            smartContractFilePath: "/home/evgeni/Documents/development/massa/massa-web3/test/unit/myModule.ts",
        } as WasmConfig);
        console.log("smart contract data", JSON.stringify(compiledSc, null, 2));
        */

        
        //const scData: CompiledSmartContract = await web3Client.smartContracts().compileSmartContractFromString(SMART_SIMPLE_CONTRACT);
        //const b64: string = Buffer.from(scData.binary).toString('base64');
        //console.log("smart contract data", b64);


        //const bytes = "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CkHwA0EQEAAACwsgAigCAEF8cSADSQRAQQBB8ApB8gNBDhAAAAsgBSACEAUgAigCACEGIANBBGpBD3EEQEEAQfAKQeUCQQ4QAAALIAZBfHEgA2siBEEQTwRAIAIgBkECcSADcjYCACADIAJBBGpqIgMgBEEEa0EBcjYCACAFIAMQBgUgAiAGQX5xNgIAIAJBBGogAigCAEF8cWoiAyADKAIAQX1xNgIACyACIAE2AgwgAiAANgIQIwgiASgCCCEDIAIjByABcjYCBCACIAM2AgggAyADKAIEQQNxIAJyNgIEIAEgAjYCCCMAIAIoAgBBfHFBBGpqJAAgAkEUaiICIQECQCAARQ0AIAFBADoAACAAIAFqIgNBAWtBADoAACAAQQJNDQAgAUEAOgABIAFBADoAAiADQQJrQQA6AAAgA0EDa0EAOgAAIABBBk0NACABQQA6AAMgA0EEa0EAOgAAIABBCE0NACABQQAgAWtBA3EiA2oiAUEANgIAIAEgACADa0F8cSIAaiIDQQRrQQA2AgAgAEEITQ0AIAFBADYCBCABQQA2AgggA0EMa0EANgIAIANBCGtBADYCACAAQRhNDQAgAUEANgIMIAFBADYCECABQQA2AhQgAUEANgIYIANBHGtBADYCACADQRhrQQA2AgAgA0EUa0EANgIAIANBEGtBADYCACABIAFBBHFBGGoiA2ohASAAIANrIQADQCAAQSBPBEAgAUIANwMAIAFCADcDCCABQgA3AxAgAUIANwMYIABBIGshACABQSBqIQEMAQsLCyACC2EBA38gAARAIABBFGsiASgCBEEDcUEDRgRAQbALQeAIQdECQQcQAAALIAEQAyMEIgMoAgghAiABIANBA3I2AgQgASACNgIIIAIgAigCBEEDcSABcjYCBCADIAE2AggLIAALbgECfyAARQRADwsgAEEUayIBKAIEQQNxQQNHBEBB8AtB4AhB3wJBBRAAAAsjAkEBRgRAIAEQBAUgARADIwgiACgCCCECIAEjByAAcjYCBCABIAI2AgggAiACKAIEQQNxIAFyNgIEIAAgATYCCAsLOQAjAkEASgRAA0AjAgRAEAkaDAELCwsQCRoDQCMCBEAQCRoMAQsLIwCtQsgBfkLkAICnQYAIaiQBCy4AAkACQAJAAkAgAEEIaygCAA4DAAECAwsPCw8LIAAoAgAiAARAIAAQEQsPCwALVgA/AEEQdEG8jAFrQQF2JAFBlAlBkAk2AgBBmAlBkAk2AgBBkAkkBEG0CUGwCTYCAEG4CUGwCTYCAEGwCSQGQcQKQcAKNgIAQcgKQcAKNgIAQcAKJAgLIAAjByAAQRRrIgAoAgRBA3FGBEAgABAEIwNBAWokAwsLC5ADDwBBjAgLATwAQZgICy8BAAAAKAAAAEEAbABsAG8AYwBhAHQAaQBvAG4AIAB0AG8AbwAgAGwAYQByAGcAZQBBzAgLATwAQdgICycBAAAAIAAAAH4AbABpAGIALwByAHQALwBpAHQAYwBtAHMALgB0AHMAQcwJCwE8AEHYCQsrAQAAACQAAABJAG4AZABlAHgAIABvAHUAdAAgAG8AZgAgAHIAYQBuAGcAZQBBjAoLASwAQZgKCxsBAAAAFAAAAH4AbABpAGIALwByAHQALgB0AHMAQdwKCwE8AEHoCgslAQAAAB4AAAB+AGwAaQBiAC8AcgB0AC8AdABsAHMAZgAuAHQAcwBBnAsLATwAQagLCzEBAAAAKgAAAE8AYgBqAGUAYwB0ACAAYQBsAHIAZQBhAGQAeQAgAHAAaQBuAG4AZQBkAEHcCwsBPABB6AsLLwEAAAAoAAAATwBiAGoAZQBjAHQAIABpAHMAIABuAG8AdAAgAHAAaQBuAG4AZQBkAEGgDAsNAwAAACAAAAAAAAAAIAAkEHNvdXJjZU1hcHBpbmdVUkwSLi9mdW5jX3NjLndhc20ubWFw";
        //var bytes = "";

        
        /*
        var u8 = new Uint8Array([65, 66, 67, 68]);
        encode: var b64 = Buffer.from(u8).toString('base64');
        decode: var u8 = new Uint8Array(Buffer.from(b64, 'base64'))
        */

        const pathToWasm = "/home/evgeni/Documents/development/massa/massa-sc-examples/build/helloworld.wasm"; //UPDATE!!!
        const wasmFile: Buffer = fs.readFileSync(pathToWasm);
        const b64: string = Buffer.from(wasmFile).toString('base64');
        console.log("smart contract data", b64);


        // deploy smart contract
        const opIds = await web3Client.smartContracts().executeSC({
            fee: 0,
            maxGas: 1000000,
            gasPrice: 0,
            coins: 0,
            contractData: b64
        } as IContractData, baseAccount);
        console.log("operation ids", JSON.stringify(opIds, null, 2));
        

    } catch (ex) {
        console.error("Error = ", ex.message);
    }
})();
// Copyright (c) 2023 MASSA LABS <info@massa.net>

// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts+dts"
// @generated from file common.proto (package massa.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * BytesMapFieldEntry
 *
 * @generated from message massa.api.v1.BytesMapFieldEntry
 */
export class BytesMapFieldEntry extends Message<BytesMapFieldEntry> {
  /**
   * bytes key
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  /**
   * bytes key
   *
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<BytesMapFieldEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.BytesMapFieldEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BytesMapFieldEntry {
    return new BytesMapFieldEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BytesMapFieldEntry {
    return new BytesMapFieldEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BytesMapFieldEntry {
    return new BytesMapFieldEntry().fromJsonString(jsonString, options);
  }

  static equals(a: BytesMapFieldEntry | PlainMessage<BytesMapFieldEntry> | undefined, b: BytesMapFieldEntry | PlainMessage<BytesMapFieldEntry> | undefined): boolean {
    return proto3.util.equals(BytesMapFieldEntry, a, b);
  }
}

/**
 * Packages a type such that it can be securely sent and received in a trust-free network
 *
 * @generated from message massa.api.v1.SecureShare
 */
export class SecureShare extends Message<SecureShare> {
  /**
   * Content in sharable, deserializable form. Is used in the secure verification protocols
   *
   * @generated from field: bytes serialized_data = 1;
   */
  serializedData = new Uint8Array(0);

  /**
   * A cryptographically generated value using `serialized_data` and a public key.
   *
   * @generated from field: string signature = 2;
   */
  signature = "";

  /**
   * The public-key component used in the generation of the signature
   *
   * @generated from field: string content_creator_pub_key = 3;
   */
  contentCreatorPubKey = "";

  /**
   * Derived from the same public key used to generate the signature
   *
   * @generated from field: string content_creator_address = 4;
   */
  contentCreatorAddress = "";

  /**
   * A secure hash of the data. See also [massa_hash::Hash]
   *
   * @generated from field: string id = 5;
   */
  id = "";

  constructor(data?: PartialMessage<SecureShare>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SecureShare";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serialized_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_creator_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content_creator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureShare {
    return new SecureShare().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureShare {
    return new SecureShare().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureShare {
    return new SecureShare().fromJsonString(jsonString, options);
  }

  static equals(a: SecureShare | PlainMessage<SecureShare> | undefined, b: SecureShare | PlainMessage<SecureShare> | undefined): boolean {
    return proto3.util.equals(SecureShare, a, b);
  }
}


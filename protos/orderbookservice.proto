syntax = "proto3";

package orderbook;

// Service Definition
service Orderbook {

	/// create and delete orderbooks
	rpc createOrderbook (CreateOrderbookRequest) returns (CreateOrderbookResponse) {};
	rpc deleteOrderbook (DeleteOderbookRequest) returns (DeleteOrderbookResponse) {};
	/// add an order, returning immediately an event indicating the result.
	rpc addOrder (AddOrderRequest) returns (AddOrderResponse) {};
	/// cancel order, which removes the order with the specified ID from the order book.
	rpc cancelOrder (CancelOrderRequest) returns (CancelOrderResponse) {};
	/// returns the order data and status
	rpc getOrder (GetOrderRequest) returns (GetOrderResponse) {};
	/// returns the stats
	rpc getStats (GetStatsRequest) returns (GetStatsResponse) {};

	//rpc getOrdersStream (getOrdersStreamRequest) returns stream (getOrdersStreamResponse) {}
	//rpc getOrderbookDepthStream (getOrderbookDepthStreamRequest) returns stream (getOrderbookDepthStreamResponse) {}
}

// enums
enum OrderSide {
    /// The ask (or sell) side.
	Ask = 0;
    /// The bid (or buy) side.
	Bid = 1;
}

enum OrderType {
    /// A limit order, which is either filled immediately, or added to the order
    /// book.
	Limit = 0;
    /// A market order, which is either filled immediately (even partially), or
    /// canceled.
	Market = 1;
}

enum OrderStatus {
	/// Indicating that the corresponding order was not filled. It is only sent
    /// in response to market orders.
	Unfilled = 0;
    /// Indicating that the corresponding order was placed on the order book. It
    /// is only send in response to limit orders.
	Placed = 1;
    /// Indicating that the corresponding order was removed from the order book.
    /// It is only sent in response to cancel orders.
	Cancelled = 2;
    /// Indicating that the corresponding order was only partially filled. It is
    /// sent in response to market or limit orders.
	PartiallyFilled = 3;
    /// Indicating that the corresponding order was filled completely. It is
    /// sent in response to market or limit orders.
	Filled = 4;
}

// structs
message Order {
	string orderbook_id = 1;
	string id = 2;
	string ticker = 3;
	OrderType order_type = 4;
	OrderSide order_side = 5;
	string price = 6;
	string quantity = 7;
	OrderStatus status = 8;
}

// add order
message AddOrderRequest {
	string orderbook_id = 1;
	string ticker = 2;
	OrderType order_type = 3;
	OrderSide order_side = 4;
	string price = 5;
	string quantity = 6;
}

message AddOrderResponse {
	Order order = 1;
}

// cancel order
message CancelOrderRequest {
	string orderbook_id = 1;
	string ticker = 2;
	string order_id = 3;
}

message CancelOrderResponse {
	OrderStatus status = 1;
}

// get order status
message GetOrderRequest {
	string orderbook_id = 1;
	string order_id = 2;
}

message GetOrderResponse {
	Order order = 1;
}

// get stats request
message GetStatsRequest {
	string orderbook_id = 1;
	string ticker = 2;
}

message GetStatsResponse {
	string max_bid = 1;
	string max_ask = 2;
	string spread = 3;
	string traded_volume = 4;
}

// CreateOrderbookRequest
message CreateOrderbookRequest {
	string name = 1;
	string ticker = 2;
}

message CreateOrderbookResponse {
	string uuid = 1;
	string ticker = 2;
}

message DeleteOderbookRequest {
	string uuid = 1;
}

message DeleteOrderbookResponse {
}


import { ISlot } from "./ISlot";

export interface IExecuteReadOnlyResponse {
    /// The slot at which the read-only execution occured.
	executed_at: ISlot;
    /// The result fo the read-only execution.
	result: string | null;
    /// The output events generated by the read-only execution.
	output_events: Map<string, ISCOutputEvent>;
}

export interface ISCOutputEvent {
    /// event id computed from if it is read only, the slot, the index in the slot
    id: string;
    /// context generated by the execution context
    context: IEventExecutionContext;
    /// json data string
    data: string;
}

export interface IEventExecutionContext {
    /// when was it generated
    slot: ISlot;
    /// block id if there was a block at that slot
    block: string | null;
    /// if the event was generated during a read only execution
    read_only: boolean;
    /// index of the event in the slot
    index_in_slot: number;
    /// most recent at the end
    call_stack: Object;
    /// origin operation id
    origin_operation_id: string | null;
}

// Copyright (c) 2023 MASSA LABS <info@massa.net>

// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts+dts"
// @generated from file slot.proto (package massa.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * When an address is drawn to create an endorsement it is selected for a specific index
 *
 * @generated from message massa.api.v1.IndexedSlot
 */
export declare class IndexedSlot extends Message<IndexedSlot> {
  /**
   * Slot
   *
   * @generated from field: massa.api.v1.Slot slot = 1;
   */
  slot?: Slot;

  /**
   * Endorsement index in the slot
   *
   * @generated from field: fixed64 index = 2;
   */
  index: bigint;

  constructor(data?: PartialMessage<IndexedSlot>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.IndexedSlot";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexedSlot;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexedSlot;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexedSlot;

  static equals(a: IndexedSlot | PlainMessage<IndexedSlot> | undefined, b: IndexedSlot | PlainMessage<IndexedSlot> | undefined): boolean;
}

/**
 * A point in time where a block is expected
 *
 * @generated from message massa.api.v1.Slot
 */
export declare class Slot extends Message<Slot> {
  /**
   * Period
   *
   * @generated from field: fixed64 period = 1;
   */
  period: bigint;

  /**
   * Thread
   *
   * @generated from field: fixed32 thread = 2;
   */
  thread: number;

  constructor(data?: PartialMessage<Slot>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.Slot";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Slot;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Slot;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Slot;

  static equals(a: Slot | PlainMessage<Slot> | undefined, b: Slot | PlainMessage<Slot> | undefined): boolean;
}


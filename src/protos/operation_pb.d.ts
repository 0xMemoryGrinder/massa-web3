// Copyright (c) 2023 MASSA LABS <info@massa.net>

// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts+dts"
// @generated from file operation.proto (package massa.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { BytesMapFieldEntry } from "./common_pb.js";

/**
 * The operation as sent in the network
 *
 * @generated from message massa.api.v1.Operation
 */
export declare class Operation extends Message<Operation> {
  /**
   * The fee they have decided for this operation
   *
   * @generated from field: fixed64 fee = 1;
   */
  fee: bigint;

  /**
   * After `expire_period` slot the operation won't be included in a block
   *
   * @generated from field: fixed64 expire_period = 2;
   */
  expirePeriod: bigint;

  /**
   * The type specific operation part
   *
   * @generated from field: massa.api.v1.OperationType op = 3;
   */
  op?: OperationType;

  constructor(data?: PartialMessage<Operation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.Operation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation;

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean;
}

/**
 * Type specific operation content
 *
 * @generated from message massa.api.v1.OperationType
 */
export declare class OperationType extends Message<OperationType> {
  /**
   * Transfer coins from sender to recipient
   *
   * @generated from field: massa.api.v1.Transaction transaction = 1;
   */
  transaction?: Transaction;

  /**
   * The sender buys `roll_count` rolls. Roll price is defined in configuration
   *
   * @generated from field: massa.api.v1.RollBuy roll_buy = 2;
   */
  rollBuy?: RollBuy;

  /**
   * The sender sells `roll_count` rolls. Roll price is defined in configuration
   *
   * @generated from field: massa.api.v1.RollSell roll_sell = 3;
   */
  rollSell?: RollSell;

  /**
   * Execute a smart contract
   *
   * @generated from field: massa.api.v1.ExecuteSC execut_sc = 4;
   */
  executSc?: ExecuteSC;

  /**
   * Calls an exported function from a stored smart contract
   *
   * @generated from field: massa.api.v1.CallSC call_sc = 5;
   */
  callSc?: CallSC;

  constructor(data?: PartialMessage<OperationType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.OperationType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationType;

  static equals(a: OperationType | PlainMessage<OperationType> | undefined, b: OperationType | PlainMessage<OperationType> | undefined): boolean;
}

/**
 * Transfer coins from sender to recipient
 *
 * @generated from message massa.api.v1.Transaction
 */
export declare class Transaction extends Message<Transaction> {
  /**
   * Recipient address
   *
   * @generated from field: string recipient_address = 1;
   */
  recipientAddress: string;

  /**
   * Amount
   *
   * @generated from field: fixed64 amount = 2;
   */
  amount: bigint;

  constructor(data?: PartialMessage<Transaction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.Transaction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction;

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean;
}

/**
 * The sender buys `roll_count` rolls. Roll price is defined in configuration
 *
 * @generated from message massa.api.v1.RollBuy
 */
export declare class RollBuy extends Message<RollBuy> {
  /**
   * Roll count
   *
   * @generated from field: fixed64 roll_count = 1;
   */
  rollCount: bigint;

  constructor(data?: PartialMessage<RollBuy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.RollBuy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollBuy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollBuy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollBuy;

  static equals(a: RollBuy | PlainMessage<RollBuy> | undefined, b: RollBuy | PlainMessage<RollBuy> | undefined): boolean;
}

/**
 * The sender sells `roll_count` rolls. Roll price is defined in configuration
 *
 * @generated from message massa.api.v1.RollSell
 */
export declare class RollSell extends Message<RollSell> {
  /**
   * Roll count
   *
   * @generated from field: fixed64 roll_count = 1;
   */
  rollCount: bigint;

  constructor(data?: PartialMessage<RollSell>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.RollSell";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollSell;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollSell;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollSell;

  static equals(a: RollSell | PlainMessage<RollSell> | undefined, b: RollSell | PlainMessage<RollSell> | undefined): boolean;
}

/**
 * Execute a smart contract
 *
 * @generated from message massa.api.v1.ExecuteSC
 */
export declare class ExecuteSC extends Message<ExecuteSC> {
  /**
   * Smart contract bytecode.
   *
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * The maximum amount of gas that the execution of the contract is allowed to cost
   *
   * @generated from field: fixed64 max_gas = 2;
   */
  maxGas: bigint;

  /**
   * A key-value store associating a hash to arbitrary bytes
   *
   * @generated from field: repeated massa.api.v1.BytesMapFieldEntry datastore = 3;
   */
  datastore: BytesMapFieldEntry[];

  constructor(data?: PartialMessage<ExecuteSC>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.ExecuteSC";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteSC;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteSC;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteSC;

  static equals(a: ExecuteSC | PlainMessage<ExecuteSC> | undefined, b: ExecuteSC | PlainMessage<ExecuteSC> | undefined): boolean;
}

/**
 * Calls an exported function from a stored smart contract
 *
 * @generated from message massa.api.v1.CallSC
 */
export declare class CallSC extends Message<CallSC> {
  /**
   * Target smart contract address
   *
   * @generated from field: string target_addr = 1;
   */
  targetAddr: string;

  /**
   * Target function name. No function is called if empty
   *
   * @generated from field: string target_func = 2;
   */
  targetFunc: string;

  /**
   * Parameter to pass to the target function
   *
   * @generated from field: bytes param = 3;
   */
  param: Uint8Array;

  /**
   * The maximum amount of gas that the execution of the contract is allowed to cost
   *
   * @generated from field: fixed64 max_gas = 4;
   */
  maxGas: bigint;

  /**
   * Extra coins that are spent from the caller's balance and transferred to the target
   *
   * @generated from field: fixed64 coins = 5;
   */
  coins: bigint;

  constructor(data?: PartialMessage<CallSC>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.CallSC";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallSC;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallSC;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallSC;

  static equals(a: CallSC | PlainMessage<CallSC> | undefined, b: CallSC | PlainMessage<CallSC> | undefined): boolean;
}

/**
 * Signed operation
 *
 * @generated from message massa.api.v1.SignedOperation
 */
export declare class SignedOperation extends Message<SignedOperation> {
  /**
   * Operation
   *
   * @generated from field: massa.api.v1.Operation content = 1;
   */
  content?: Operation;

  /**
   * A cryptographically generated value using `serialized_data` and a public key.
   *
   * @generated from field: string signature = 2;
   */
  signature: string;

  /**
   * The public-key component used in the generation of the signature
   *
   * @generated from field: string content_creator_pub_key = 3;
   */
  contentCreatorPubKey: string;

  /**
   * Derived from the same public key used to generate the signature
   *
   * @generated from field: string content_creator_address = 4;
   */
  contentCreatorAddress: string;

  /**
   * A secure hash of the data. See also [massa_hash::Hash]
   *
   * @generated from field: string id = 5;
   */
  id: string;

  constructor(data?: PartialMessage<SignedOperation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "massa.api.v1.SignedOperation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedOperation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedOperation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedOperation;

  static equals(a: SignedOperation | PlainMessage<SignedOperation> | undefined, b: SignedOperation | PlainMessage<SignedOperation> | undefined): boolean;
}


// Copyright (c) 2023 MASSA LABS <info@massa.net>

// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts+dts"
// @generated from file api.proto (package massa.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { IndexedSlot, Slot } from "./slot_pb.js";
import { Block, FilledBlock, SignedBlock, SignedBlockHeader } from "./block_pb.js";
import { SignedOperation } from "./operation_pb.js";
import { SecureShare } from "./common_pb.js";
import { Status } from "./google/rpc/status_pb.js";

/**
 * Operation type enum
 *
 * @generated from enum massa.api.v1.OpType
 */
export enum OpType {
  /**
   * Defaut enum value
   *
   * @generated from enum value: OP_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Transaction
   *
   * @generated from enum value: OP_TYPE_TRANSACTION = 1;
   */
  TRANSACTION = 1,

  /**
   * Roll buy
   *
   * @generated from enum value: OP_TYPE_ROLL_BUY = 2;
   */
  ROLL_BUY = 2,

  /**
   * Roll sell
   *
   * @generated from enum value: OP_TYPE_ROLL_SELL = 3;
   */
  ROLL_SELL = 3,

  /**
   * Execute smart contract
   *
   * @generated from enum value: OP_TYPE_EXECUTE_SC = 4;
   */
  EXECUTE_SC = 4,

  /**
   * Call smart contract
   *
   * @generated from enum value: OP_TYPE_CALL_SC = 5;
   */
  CALL_SC = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(OpType)
proto3.util.setEnumType(OpType, "massa.api.v1.OpType", [
  { no: 0, name: "OP_TYPE_UNSPECIFIED" },
  { no: 1, name: "OP_TYPE_TRANSACTION" },
  { no: 2, name: "OP_TYPE_ROLL_BUY" },
  { no: 3, name: "OP_TYPE_ROLL_SELL" },
  { no: 4, name: "OP_TYPE_EXECUTE_SC" },
  { no: 5, name: "OP_TYPE_CALL_SC" },
]);

/**
 * GetBlocksBySlotsRequest holds request for GetBlocksBySlots
 *
 * @generated from message massa.api.v1.GetBlocksBySlotsRequest
 */
export class GetBlocksBySlotsRequest extends Message<GetBlocksBySlotsRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Slots
   *
   * @generated from field: repeated massa.api.v1.Slot slots = 2;
   */
  slots: Slot[] = [];

  constructor(data?: PartialMessage<GetBlocksBySlotsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetBlocksBySlotsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slots", kind: "message", T: Slot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocksBySlotsRequest {
    return new GetBlocksBySlotsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocksBySlotsRequest {
    return new GetBlocksBySlotsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocksBySlotsRequest {
    return new GetBlocksBySlotsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocksBySlotsRequest | PlainMessage<GetBlocksBySlotsRequest> | undefined, b: GetBlocksBySlotsRequest | PlainMessage<GetBlocksBySlotsRequest> | undefined): boolean {
    return proto3.util.equals(GetBlocksBySlotsRequest, a, b);
  }
}

/**
 * GetBlocksBySlotsResponse holds response from GetBlocksBySlots
 *
 * @generated from message massa.api.v1.GetBlocksBySlotsResponse
 */
export class GetBlocksBySlotsResponse extends Message<GetBlocksBySlotsResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Blocks
   *
   * @generated from field: repeated massa.api.v1.Block blocks = 2;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<GetBlocksBySlotsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetBlocksBySlotsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocksBySlotsResponse {
    return new GetBlocksBySlotsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocksBySlotsResponse {
    return new GetBlocksBySlotsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocksBySlotsResponse {
    return new GetBlocksBySlotsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocksBySlotsResponse | PlainMessage<GetBlocksBySlotsResponse> | undefined, b: GetBlocksBySlotsResponse | PlainMessage<GetBlocksBySlotsResponse> | undefined): boolean {
    return proto3.util.equals(GetBlocksBySlotsResponse, a, b);
  }
}

/**
 * GetDatastoreEntriesRequest holds request from GetDatastoreEntries
 *
 * @generated from message massa.api.v1.GetDatastoreEntriesRequest
 */
export class GetDatastoreEntriesRequest extends Message<GetDatastoreEntriesRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Queries
   *
   * @generated from field: repeated massa.api.v1.DatastoreEntriesQuery queries = 2;
   */
  queries: DatastoreEntriesQuery[] = [];

  constructor(data?: PartialMessage<GetDatastoreEntriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetDatastoreEntriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "queries", kind: "message", T: DatastoreEntriesQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatastoreEntriesRequest {
    return new GetDatastoreEntriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatastoreEntriesRequest {
    return new GetDatastoreEntriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatastoreEntriesRequest {
    return new GetDatastoreEntriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatastoreEntriesRequest | PlainMessage<GetDatastoreEntriesRequest> | undefined, b: GetDatastoreEntriesRequest | PlainMessage<GetDatastoreEntriesRequest> | undefined): boolean {
    return proto3.util.equals(GetDatastoreEntriesRequest, a, b);
  }
}

/**
 * DatastoreEntries Query
 *
 * @generated from message massa.api.v1.DatastoreEntriesQuery
 */
export class DatastoreEntriesQuery extends Message<DatastoreEntriesQuery> {
  /**
   * Filter
   *
   * @generated from field: massa.api.v1.DatastoreEntryFilter filter = 1;
   */
  filter?: DatastoreEntryFilter;

  constructor(data?: PartialMessage<DatastoreEntriesQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.DatastoreEntriesQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: DatastoreEntryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatastoreEntriesQuery {
    return new DatastoreEntriesQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatastoreEntriesQuery {
    return new DatastoreEntriesQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatastoreEntriesQuery {
    return new DatastoreEntriesQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DatastoreEntriesQuery | PlainMessage<DatastoreEntriesQuery> | undefined, b: DatastoreEntriesQuery | PlainMessage<DatastoreEntriesQuery> | undefined): boolean {
    return proto3.util.equals(DatastoreEntriesQuery, a, b);
  }
}

/**
 * @generated from message massa.api.v1.DatastoreEntryFilter
 */
export class DatastoreEntryFilter extends Message<DatastoreEntryFilter> {
  /**
   * / Associated address of the entry
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Datastore key
   *
   * @generated from field: bytes key = 2;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<DatastoreEntryFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.DatastoreEntryFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatastoreEntryFilter {
    return new DatastoreEntryFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatastoreEntryFilter {
    return new DatastoreEntryFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatastoreEntryFilter {
    return new DatastoreEntryFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DatastoreEntryFilter | PlainMessage<DatastoreEntryFilter> | undefined, b: DatastoreEntryFilter | PlainMessage<DatastoreEntryFilter> | undefined): boolean {
    return proto3.util.equals(DatastoreEntryFilter, a, b);
  }
}

/**
 * GetDatastoreEntriesResponse holds response from GetDatastoreEntries
 *
 * @generated from message massa.api.v1.GetDatastoreEntriesResponse
 */
export class GetDatastoreEntriesResponse extends Message<GetDatastoreEntriesResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Datastore entries
   *
   * @generated from field: repeated massa.api.v1.DatastoreEntry entries = 2;
   */
  entries: DatastoreEntry[] = [];

  constructor(data?: PartialMessage<GetDatastoreEntriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetDatastoreEntriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entries", kind: "message", T: DatastoreEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatastoreEntriesResponse {
    return new GetDatastoreEntriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatastoreEntriesResponse {
    return new GetDatastoreEntriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatastoreEntriesResponse {
    return new GetDatastoreEntriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatastoreEntriesResponse | PlainMessage<GetDatastoreEntriesResponse> | undefined, b: GetDatastoreEntriesResponse | PlainMessage<GetDatastoreEntriesResponse> | undefined): boolean {
    return proto3.util.equals(GetDatastoreEntriesResponse, a, b);
  }
}

/**
 * DatastoreEntry
 *
 * @generated from message massa.api.v1.DatastoreEntry
 */
export class DatastoreEntry extends Message<DatastoreEntry> {
  /**
   * final datastore entry value
   *
   * @generated from field: bytes final_value = 1;
   */
  finalValue = new Uint8Array(0);

  /**
   * candidate_value datastore entry value
   *
   * @generated from field: bytes candidate_value = 2;
   */
  candidateValue = new Uint8Array(0);

  constructor(data?: PartialMessage<DatastoreEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.DatastoreEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "final_value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "candidate_value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatastoreEntry {
    return new DatastoreEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatastoreEntry {
    return new DatastoreEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatastoreEntry {
    return new DatastoreEntry().fromJsonString(jsonString, options);
  }

  static equals(a: DatastoreEntry | PlainMessage<DatastoreEntry> | undefined, b: DatastoreEntry | PlainMessage<DatastoreEntry> | undefined): boolean {
    return proto3.util.equals(DatastoreEntry, a, b);
  }
}

/**
 * GetNextBlockBestParentsRequest holds request for GetNextBlockBestParents
 *
 * @generated from message massa.api.v1.GetNextBlockBestParentsRequest
 */
export class GetNextBlockBestParentsRequest extends Message<GetNextBlockBestParentsRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetNextBlockBestParentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetNextBlockBestParentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNextBlockBestParentsRequest {
    return new GetNextBlockBestParentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNextBlockBestParentsRequest {
    return new GetNextBlockBestParentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNextBlockBestParentsRequest {
    return new GetNextBlockBestParentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNextBlockBestParentsRequest | PlainMessage<GetNextBlockBestParentsRequest> | undefined, b: GetNextBlockBestParentsRequest | PlainMessage<GetNextBlockBestParentsRequest> | undefined): boolean {
    return proto3.util.equals(GetNextBlockBestParentsRequest, a, b);
  }
}

/**
 * GetNextBlockBestParentsResponse holds response from GetNextBlockBestParents
 *
 * @generated from message massa.api.v1.GetNextBlockBestParentsResponse
 */
export class GetNextBlockBestParentsResponse extends Message<GetNextBlockBestParentsResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Best parents
   *
   * @generated from field: repeated massa.api.v1.BlockParent parents = 2;
   */
  parents: BlockParent[] = [];

  constructor(data?: PartialMessage<GetNextBlockBestParentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetNextBlockBestParentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parents", kind: "message", T: BlockParent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNextBlockBestParentsResponse {
    return new GetNextBlockBestParentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNextBlockBestParentsResponse {
    return new GetNextBlockBestParentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNextBlockBestParentsResponse {
    return new GetNextBlockBestParentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNextBlockBestParentsResponse | PlainMessage<GetNextBlockBestParentsResponse> | undefined, b: GetNextBlockBestParentsResponse | PlainMessage<GetNextBlockBestParentsResponse> | undefined): boolean {
    return proto3.util.equals(GetNextBlockBestParentsResponse, a, b);
  }
}

/**
 * Block parent tuple
 *
 * @generated from message massa.api.v1.BlockParent
 */
export class BlockParent extends Message<BlockParent> {
  /**
   * Block id
   *
   * @generated from field: string block_id = 1;
   */
  blockId = "";

  /**
   * Period
   *
   * @generated from field: fixed64 period = 2;
   */
  period = protoInt64.zero;

  constructor(data?: PartialMessage<BlockParent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.BlockParent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "period", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockParent {
    return new BlockParent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockParent {
    return new BlockParent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockParent {
    return new BlockParent().fromJsonString(jsonString, options);
  }

  static equals(a: BlockParent | PlainMessage<BlockParent> | undefined, b: BlockParent | PlainMessage<BlockParent> | undefined): boolean {
    return proto3.util.equals(BlockParent, a, b);
  }
}

/**
 * GetSelectorDrawsRequest holds request from GetSelectorDraws
 *
 * @generated from message massa.api.v1.GetSelectorDrawsRequest
 */
export class GetSelectorDrawsRequest extends Message<GetSelectorDrawsRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Queries
   *
   * @generated from field: repeated massa.api.v1.SelectorDrawsQuery queries = 2;
   */
  queries: SelectorDrawsQuery[] = [];

  constructor(data?: PartialMessage<GetSelectorDrawsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetSelectorDrawsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "queries", kind: "message", T: SelectorDrawsQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSelectorDrawsRequest {
    return new GetSelectorDrawsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSelectorDrawsRequest {
    return new GetSelectorDrawsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSelectorDrawsRequest {
    return new GetSelectorDrawsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSelectorDrawsRequest | PlainMessage<GetSelectorDrawsRequest> | undefined, b: GetSelectorDrawsRequest | PlainMessage<GetSelectorDrawsRequest> | undefined): boolean {
    return proto3.util.equals(GetSelectorDrawsRequest, a, b);
  }
}

/**
 * SelectorDraws Query
 *
 * @generated from message massa.api.v1.SelectorDrawsQuery
 */
export class SelectorDrawsQuery extends Message<SelectorDrawsQuery> {
  /**
   * Filter
   *
   * @generated from field: massa.api.v1.SelectorDrawsFilter filter = 1;
   */
  filter?: SelectorDrawsFilter;

  constructor(data?: PartialMessage<SelectorDrawsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SelectorDrawsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: SelectorDrawsFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectorDrawsQuery {
    return new SelectorDrawsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectorDrawsQuery {
    return new SelectorDrawsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectorDrawsQuery {
    return new SelectorDrawsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SelectorDrawsQuery | PlainMessage<SelectorDrawsQuery> | undefined, b: SelectorDrawsQuery | PlainMessage<SelectorDrawsQuery> | undefined): boolean {
    return proto3.util.equals(SelectorDrawsQuery, a, b);
  }
}

/**
 * SelectorDraws Filter
 *
 * @generated from message massa.api.v1.SelectorDrawsFilter
 */
export class SelectorDrawsFilter extends Message<SelectorDrawsFilter> {
  /**
   * Address
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<SelectorDrawsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SelectorDrawsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectorDrawsFilter {
    return new SelectorDrawsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectorDrawsFilter {
    return new SelectorDrawsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectorDrawsFilter {
    return new SelectorDrawsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: SelectorDrawsFilter | PlainMessage<SelectorDrawsFilter> | undefined, b: SelectorDrawsFilter | PlainMessage<SelectorDrawsFilter> | undefined): boolean {
    return proto3.util.equals(SelectorDrawsFilter, a, b);
  }
}

/**
 * GetSelectorDrawsResponse holds response from GetSelectorDraws
 *
 * @generated from message massa.api.v1.GetSelectorDrawsResponse
 */
export class GetSelectorDrawsResponse extends Message<GetSelectorDrawsResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Selector draws
   *
   * @generated from field: repeated massa.api.v1.SelectorDraws selector_draws = 2;
   */
  selectorDraws: SelectorDraws[] = [];

  constructor(data?: PartialMessage<GetSelectorDrawsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetSelectorDrawsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "selector_draws", kind: "message", T: SelectorDraws, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSelectorDrawsResponse {
    return new GetSelectorDrawsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSelectorDrawsResponse {
    return new GetSelectorDrawsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSelectorDrawsResponse {
    return new GetSelectorDrawsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSelectorDrawsResponse | PlainMessage<GetSelectorDrawsResponse> | undefined, b: GetSelectorDrawsResponse | PlainMessage<GetSelectorDrawsResponse> | undefined): boolean {
    return proto3.util.equals(GetSelectorDrawsResponse, a, b);
  }
}

/**
 * Selector draws
 *
 * @generated from message massa.api.v1.SelectorDraws
 */
export class SelectorDraws extends Message<SelectorDraws> {
  /**
   * Address
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Next block draws
   *
   * @generated from field: repeated massa.api.v1.Slot next_block_draws = 2;
   */
  nextBlockDraws: Slot[] = [];

  /**
   * Next endorsements draws
   *
   * @generated from field: repeated massa.api.v1.IndexedSlot next_endorsement_draws = 3;
   */
  nextEndorsementDraws: IndexedSlot[] = [];

  constructor(data?: PartialMessage<SelectorDraws>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SelectorDraws";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "next_block_draws", kind: "message", T: Slot, repeated: true },
    { no: 3, name: "next_endorsement_draws", kind: "message", T: IndexedSlot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectorDraws {
    return new SelectorDraws().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectorDraws {
    return new SelectorDraws().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectorDraws {
    return new SelectorDraws().fromJsonString(jsonString, options);
  }

  static equals(a: SelectorDraws | PlainMessage<SelectorDraws> | undefined, b: SelectorDraws | PlainMessage<SelectorDraws> | undefined): boolean {
    return proto3.util.equals(SelectorDraws, a, b);
  }
}

/**
 * GetTransactionsThroughputRequest holds request for GetTransactionsThroughput
 *
 * @generated from message massa.api.v1.GetTransactionsThroughputRequest
 */
export class GetTransactionsThroughputRequest extends Message<GetTransactionsThroughputRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTransactionsThroughputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetTransactionsThroughputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionsThroughputRequest {
    return new GetTransactionsThroughputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionsThroughputRequest {
    return new GetTransactionsThroughputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionsThroughputRequest {
    return new GetTransactionsThroughputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionsThroughputRequest | PlainMessage<GetTransactionsThroughputRequest> | undefined, b: GetTransactionsThroughputRequest | PlainMessage<GetTransactionsThroughputRequest> | undefined): boolean {
    return proto3.util.equals(GetTransactionsThroughputRequest, a, b);
  }
}

/**
 * GetTransactionsThroughputResponse holds response from GetTransactionsThroughput
 *
 * @generated from message massa.api.v1.GetTransactionsThroughputResponse
 */
export class GetTransactionsThroughputResponse extends Message<GetTransactionsThroughputResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Transactions throughput
   *
   * @generated from field: fixed32 throughput = 2;
   */
  throughput = 0;

  constructor(data?: PartialMessage<GetTransactionsThroughputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetTransactionsThroughputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "throughput", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionsThroughputResponse {
    return new GetTransactionsThroughputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionsThroughputResponse {
    return new GetTransactionsThroughputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionsThroughputResponse {
    return new GetTransactionsThroughputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionsThroughputResponse | PlainMessage<GetTransactionsThroughputResponse> | undefined, b: GetTransactionsThroughputResponse | PlainMessage<GetTransactionsThroughputResponse> | undefined): boolean {
    return proto3.util.equals(GetTransactionsThroughputResponse, a, b);
  }
}

/**
 * GetVersionRequest holds request from GetVersion
 *
 * @generated from message massa.api.v1.GetVersionRequest
 */
export class GetVersionRequest extends Message<GetVersionRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined, b: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetVersionRequest, a, b);
  }
}

/**
 * GetVersionResponse holds response from GetVersion
 *
 * @generated from message massa.api.v1.GetVersionResponse
 */
export class GetVersionResponse extends Message<GetVersionResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Version
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<GetVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.GetVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionResponse | PlainMessage<GetVersionResponse> | undefined, b: GetVersionResponse | PlainMessage<GetVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetVersionResponse, a, b);
  }
}

/**
 * NewBlocksRequest holds request for NewBlocks
 *
 * @generated from message massa.api.v1.NewBlocksRequest
 */
export class NewBlocksRequest extends Message<NewBlocksRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<NewBlocksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewBlocksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewBlocksRequest {
    return new NewBlocksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewBlocksRequest {
    return new NewBlocksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewBlocksRequest {
    return new NewBlocksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewBlocksRequest | PlainMessage<NewBlocksRequest> | undefined, b: NewBlocksRequest | PlainMessage<NewBlocksRequest> | undefined): boolean {
    return proto3.util.equals(NewBlocksRequest, a, b);
  }
}

/**
 * NewBlocksResponse holds response from NewBlocks
 *
 * @generated from message massa.api.v1.NewBlocksResponse
 */
export class NewBlocksResponse extends Message<NewBlocksResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Signed block
   *
   * @generated from field: massa.api.v1.SignedBlock block = 2;
   */
  block?: SignedBlock;

  constructor(data?: PartialMessage<NewBlocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewBlocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block", kind: "message", T: SignedBlock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewBlocksResponse {
    return new NewBlocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewBlocksResponse {
    return new NewBlocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewBlocksResponse {
    return new NewBlocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewBlocksResponse | PlainMessage<NewBlocksResponse> | undefined, b: NewBlocksResponse | PlainMessage<NewBlocksResponse> | undefined): boolean {
    return proto3.util.equals(NewBlocksResponse, a, b);
  }
}

/**
 * NewBlocksHeadersRequest holds request for NewBlocksHeaders
 *
 * @generated from message massa.api.v1.NewBlocksHeadersRequest
 */
export class NewBlocksHeadersRequest extends Message<NewBlocksHeadersRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<NewBlocksHeadersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewBlocksHeadersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewBlocksHeadersRequest {
    return new NewBlocksHeadersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewBlocksHeadersRequest {
    return new NewBlocksHeadersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewBlocksHeadersRequest {
    return new NewBlocksHeadersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewBlocksHeadersRequest | PlainMessage<NewBlocksHeadersRequest> | undefined, b: NewBlocksHeadersRequest | PlainMessage<NewBlocksHeadersRequest> | undefined): boolean {
    return proto3.util.equals(NewBlocksHeadersRequest, a, b);
  }
}

/**
 * NewBlocksHeadersResponse holds response from NewBlocksHeaders
 *
 * @generated from message massa.api.v1.NewBlocksHeadersResponse
 */
export class NewBlocksHeadersResponse extends Message<NewBlocksHeadersResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Signed block header
   *
   * @generated from field: massa.api.v1.SignedBlockHeader block_header = 2;
   */
  blockHeader?: SignedBlockHeader;

  constructor(data?: PartialMessage<NewBlocksHeadersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewBlocksHeadersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_header", kind: "message", T: SignedBlockHeader },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewBlocksHeadersResponse {
    return new NewBlocksHeadersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewBlocksHeadersResponse {
    return new NewBlocksHeadersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewBlocksHeadersResponse {
    return new NewBlocksHeadersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewBlocksHeadersResponse | PlainMessage<NewBlocksHeadersResponse> | undefined, b: NewBlocksHeadersResponse | PlainMessage<NewBlocksHeadersResponse> | undefined): boolean {
    return proto3.util.equals(NewBlocksHeadersResponse, a, b);
  }
}

/**
 * NewFilledBlocksRequest holds request for NewFilledBlocks
 *
 * @generated from message massa.api.v1.NewFilledBlocksRequest
 */
export class NewFilledBlocksRequest extends Message<NewFilledBlocksRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<NewFilledBlocksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewFilledBlocksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewFilledBlocksRequest {
    return new NewFilledBlocksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewFilledBlocksRequest {
    return new NewFilledBlocksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewFilledBlocksRequest {
    return new NewFilledBlocksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewFilledBlocksRequest | PlainMessage<NewFilledBlocksRequest> | undefined, b: NewFilledBlocksRequest | PlainMessage<NewFilledBlocksRequest> | undefined): boolean {
    return proto3.util.equals(NewFilledBlocksRequest, a, b);
  }
}

/**
 * NewFilledBlocksResponse holds response from NewFilledBlocks
 *
 * @generated from message massa.api.v1.NewFilledBlocksResponse
 */
export class NewFilledBlocksResponse extends Message<NewFilledBlocksResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Block with operations content
   *
   * @generated from field: massa.api.v1.FilledBlock filled_block = 2;
   */
  filledBlock?: FilledBlock;

  constructor(data?: PartialMessage<NewFilledBlocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewFilledBlocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filled_block", kind: "message", T: FilledBlock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewFilledBlocksResponse {
    return new NewFilledBlocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewFilledBlocksResponse {
    return new NewFilledBlocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewFilledBlocksResponse {
    return new NewFilledBlocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewFilledBlocksResponse | PlainMessage<NewFilledBlocksResponse> | undefined, b: NewFilledBlocksResponse | PlainMessage<NewFilledBlocksResponse> | undefined): boolean {
    return proto3.util.equals(NewFilledBlocksResponse, a, b);
  }
}

/**
 * NewOperationsRequest holds request for NewOperations
 *
 * @generated from message massa.api.v1.NewOperationsRequest
 */
export class NewOperationsRequest extends Message<NewOperationsRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Query
   *
   * @generated from field: massa.api.v1.NewOperationsQuery query = 2;
   */
  query?: NewOperationsQuery;

  constructor(data?: PartialMessage<NewOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "message", T: NewOperationsQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewOperationsRequest {
    return new NewOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewOperationsRequest {
    return new NewOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewOperationsRequest {
    return new NewOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewOperationsRequest | PlainMessage<NewOperationsRequest> | undefined, b: NewOperationsRequest | PlainMessage<NewOperationsRequest> | undefined): boolean {
    return proto3.util.equals(NewOperationsRequest, a, b);
  }
}

/**
 * NewOperations Query
 *
 * @generated from message massa.api.v1.NewOperationsQuery
 */
export class NewOperationsQuery extends Message<NewOperationsQuery> {
  /**
   * Filter
   *
   * @generated from field: massa.api.v1.NewOperationsFilter filter = 1;
   */
  filter?: NewOperationsFilter;

  constructor(data?: PartialMessage<NewOperationsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewOperationsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: NewOperationsFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewOperationsQuery {
    return new NewOperationsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewOperationsQuery {
    return new NewOperationsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewOperationsQuery {
    return new NewOperationsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: NewOperationsQuery | PlainMessage<NewOperationsQuery> | undefined, b: NewOperationsQuery | PlainMessage<NewOperationsQuery> | undefined): boolean {
    return proto3.util.equals(NewOperationsQuery, a, b);
  }
}

/**
 * NewOperations Filter
 *
 * @generated from message massa.api.v1.NewOperationsFilter
 */
export class NewOperationsFilter extends Message<NewOperationsFilter> {
  /**
   * Operation type enum
   *
   * @generated from field: repeated massa.api.v1.OpType types = 1;
   */
  types: OpType[] = [];

  constructor(data?: PartialMessage<NewOperationsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewOperationsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "types", kind: "enum", T: proto3.getEnumType(OpType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewOperationsFilter {
    return new NewOperationsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewOperationsFilter {
    return new NewOperationsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewOperationsFilter {
    return new NewOperationsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: NewOperationsFilter | PlainMessage<NewOperationsFilter> | undefined, b: NewOperationsFilter | PlainMessage<NewOperationsFilter> | undefined): boolean {
    return proto3.util.equals(NewOperationsFilter, a, b);
  }
}

/**
 * NewOperationsResponse holds response from NewOperations
 *
 * @generated from message massa.api.v1.NewOperationsResponse
 */
export class NewOperationsResponse extends Message<NewOperationsResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Signed operation
   *
   * @generated from field: massa.api.v1.SignedOperation operation = 2;
   */
  operation?: SignedOperation;

  constructor(data?: PartialMessage<NewOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.NewOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operation", kind: "message", T: SignedOperation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewOperationsResponse {
    return new NewOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewOperationsResponse {
    return new NewOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewOperationsResponse {
    return new NewOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewOperationsResponse | PlainMessage<NewOperationsResponse> | undefined, b: NewOperationsResponse | PlainMessage<NewOperationsResponse> | undefined): boolean {
    return proto3.util.equals(NewOperationsResponse, a, b);
  }
}

/**
 * SendBlocksRequest holds parameters to SendBlocks
 *
 * @generated from message massa.api.v1.SendBlocksRequest
 */
export class SendBlocksRequest extends Message<SendBlocksRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secure shared block
   *
   * @generated from field: massa.api.v1.SecureShare block = 2;
   */
  block?: SecureShare;

  constructor(data?: PartialMessage<SendBlocksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SendBlocksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block", kind: "message", T: SecureShare },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendBlocksRequest {
    return new SendBlocksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendBlocksRequest {
    return new SendBlocksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendBlocksRequest {
    return new SendBlocksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendBlocksRequest | PlainMessage<SendBlocksRequest> | undefined, b: SendBlocksRequest | PlainMessage<SendBlocksRequest> | undefined): boolean {
    return proto3.util.equals(SendBlocksRequest, a, b);
  }
}

/**
 * SendBlocksResponse holds response from SendBlocks
 *
 * @generated from message massa.api.v1.SendBlocksResponse
 */
export class SendBlocksResponse extends Message<SendBlocksResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Block result or a gRPC status
   *
   * @generated from oneof massa.api.v1.SendBlocksResponse.message
   */
  message: {
    /**
     * Block result
     *
     * @generated from field: massa.api.v1.BlockResult result = 2;
     */
    value: BlockResult;
    case: "result";
  } | {
    /**
     * gRPC error(status)
     *
     * @generated from field: google.rpc.Status error = 3;
     */
    value: Status;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SendBlocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SendBlocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "message", T: BlockResult, oneof: "message" },
    { no: 3, name: "error", kind: "message", T: Status, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendBlocksResponse {
    return new SendBlocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendBlocksResponse {
    return new SendBlocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendBlocksResponse {
    return new SendBlocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendBlocksResponse | PlainMessage<SendBlocksResponse> | undefined, b: SendBlocksResponse | PlainMessage<SendBlocksResponse> | undefined): boolean {
    return proto3.util.equals(SendBlocksResponse, a, b);
  }
}

/**
 * Holds Block response
 *
 * @generated from message massa.api.v1.BlockResult
 */
export class BlockResult extends Message<BlockResult> {
  /**
   * Block id
   *
   * @generated from field: string block_id = 1;
   */
  blockId = "";

  constructor(data?: PartialMessage<BlockResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.BlockResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockResult {
    return new BlockResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockResult {
    return new BlockResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockResult {
    return new BlockResult().fromJsonString(jsonString, options);
  }

  static equals(a: BlockResult | PlainMessage<BlockResult> | undefined, b: BlockResult | PlainMessage<BlockResult> | undefined): boolean {
    return proto3.util.equals(BlockResult, a, b);
  }
}

/**
 * SendEndorsementsRequest holds parameters to SendEndorsements
 *
 * @generated from message massa.api.v1.SendEndorsementsRequest
 */
export class SendEndorsementsRequest extends Message<SendEndorsementsRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secure shared endorsements
   *
   * @generated from field: repeated massa.api.v1.SecureShare endorsements = 2;
   */
  endorsements: SecureShare[] = [];

  constructor(data?: PartialMessage<SendEndorsementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SendEndorsementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endorsements", kind: "message", T: SecureShare, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendEndorsementsRequest {
    return new SendEndorsementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendEndorsementsRequest {
    return new SendEndorsementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendEndorsementsRequest {
    return new SendEndorsementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendEndorsementsRequest | PlainMessage<SendEndorsementsRequest> | undefined, b: SendEndorsementsRequest | PlainMessage<SendEndorsementsRequest> | undefined): boolean {
    return proto3.util.equals(SendEndorsementsRequest, a, b);
  }
}

/**
 * SendEndorsementsResponse holds response from SendEndorsements
 *
 * @generated from message massa.api.v1.SendEndorsementsResponse
 */
export class SendEndorsementsResponse extends Message<SendEndorsementsResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Endorsement result or gRPC status
   *
   * @generated from oneof massa.api.v1.SendEndorsementsResponse.message
   */
  message: {
    /**
     * Endorsement result
     *
     * @generated from field: massa.api.v1.EndorsementResult result = 2;
     */
    value: EndorsementResult;
    case: "result";
  } | {
    /**
     * gRPC error(status)
     *
     * @generated from field: google.rpc.Status error = 3;
     */
    value: Status;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SendEndorsementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SendEndorsementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "message", T: EndorsementResult, oneof: "message" },
    { no: 3, name: "error", kind: "message", T: Status, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendEndorsementsResponse {
    return new SendEndorsementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendEndorsementsResponse {
    return new SendEndorsementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendEndorsementsResponse {
    return new SendEndorsementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendEndorsementsResponse | PlainMessage<SendEndorsementsResponse> | undefined, b: SendEndorsementsResponse | PlainMessage<SendEndorsementsResponse> | undefined): boolean {
    return proto3.util.equals(SendEndorsementsResponse, a, b);
  }
}

/**
 * Holds Endorsement response
 *
 * @generated from message massa.api.v1.EndorsementResult
 */
export class EndorsementResult extends Message<EndorsementResult> {
  /**
   * Endorsements ids
   *
   * @generated from field: repeated string endorsements_ids = 1;
   */
  endorsementsIds: string[] = [];

  constructor(data?: PartialMessage<EndorsementResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.EndorsementResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endorsements_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndorsementResult {
    return new EndorsementResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndorsementResult {
    return new EndorsementResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndorsementResult {
    return new EndorsementResult().fromJsonString(jsonString, options);
  }

  static equals(a: EndorsementResult | PlainMessage<EndorsementResult> | undefined, b: EndorsementResult | PlainMessage<EndorsementResult> | undefined): boolean {
    return proto3.util.equals(EndorsementResult, a, b);
  }
}

/**
 * SendOperationsRequest holds parameters to SendOperations
 *
 * @generated from message massa.api.v1.SendOperationsRequest
 */
export class SendOperationsRequest extends Message<SendOperationsRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secured shared operations
   *
   * @generated from field: repeated massa.api.v1.SecureShare operations = 2;
   */
  operations: SecureShare[] = [];

  constructor(data?: PartialMessage<SendOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SendOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operations", kind: "message", T: SecureShare, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendOperationsRequest {
    return new SendOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendOperationsRequest {
    return new SendOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendOperationsRequest {
    return new SendOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendOperationsRequest | PlainMessage<SendOperationsRequest> | undefined, b: SendOperationsRequest | PlainMessage<SendOperationsRequest> | undefined): boolean {
    return proto3.util.equals(SendOperationsRequest, a, b);
  }
}

/**
 * SendOperationsResponse holds response from SendOperations
 *
 * @generated from message massa.api.v1.SendOperationsResponse
 */
export class SendOperationsResponse extends Message<SendOperationsResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Operation result or gRPC status
   *
   * @generated from oneof massa.api.v1.SendOperationsResponse.message
   */
  message: {
    /**
     * Operation result
     *
     * @generated from field: massa.api.v1.OperationResult result = 2;
     */
    value: OperationResult;
    case: "result";
  } | {
    /**
     * gRPC error(status)
     *
     * @generated from field: google.rpc.Status error = 3;
     */
    value: Status;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SendOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SendOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "message", T: OperationResult, oneof: "message" },
    { no: 3, name: "error", kind: "message", T: Status, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendOperationsResponse {
    return new SendOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendOperationsResponse {
    return new SendOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendOperationsResponse {
    return new SendOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendOperationsResponse | PlainMessage<SendOperationsResponse> | undefined, b: SendOperationsResponse | PlainMessage<SendOperationsResponse> | undefined): boolean {
    return proto3.util.equals(SendOperationsResponse, a, b);
  }
}

/**
 * Holds Operation response
 *
 * @generated from message massa.api.v1.OperationResult
 */
export class OperationResult extends Message<OperationResult> {
  /**
   * Operation(s) id(s)
   *
   * @generated from field: repeated string operations_ids = 1;
   */
  operationsIds: string[] = [];

  constructor(data?: PartialMessage<OperationResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.OperationResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operations_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationResult {
    return new OperationResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationResult {
    return new OperationResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationResult {
    return new OperationResult().fromJsonString(jsonString, options);
  }

  static equals(a: OperationResult | PlainMessage<OperationResult> | undefined, b: OperationResult | PlainMessage<OperationResult> | undefined): boolean {
    return proto3.util.equals(OperationResult, a, b);
  }
}

/**
 * TransactionsThroughputRequest holds request for TransactionsThroughput
 *
 * @generated from message massa.api.v1.TransactionsThroughputRequest
 */
export class TransactionsThroughputRequest extends Message<TransactionsThroughputRequest> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Optional timer interval in sec. Defaults to 10s
   *
   * @generated from field: optional fixed64 interval = 2;
   */
  interval?: bigint;

  constructor(data?: PartialMessage<TransactionsThroughputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.TransactionsThroughputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interval", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionsThroughputRequest {
    return new TransactionsThroughputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionsThroughputRequest {
    return new TransactionsThroughputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionsThroughputRequest {
    return new TransactionsThroughputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionsThroughputRequest | PlainMessage<TransactionsThroughputRequest> | undefined, b: TransactionsThroughputRequest | PlainMessage<TransactionsThroughputRequest> | undefined): boolean {
    return proto3.util.equals(TransactionsThroughputRequest, a, b);
  }
}

/**
 * TransactionsThroughputResponse holds response from TransactionsThroughput
 *
 * @generated from message massa.api.v1.TransactionsThroughputResponse
 */
export class TransactionsThroughputResponse extends Message<TransactionsThroughputResponse> {
  /**
   * Request id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Transactions throughput
   *
   * @generated from field: fixed32 throughput = 2;
   */
  throughput = 0;

  constructor(data?: PartialMessage<TransactionsThroughputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.TransactionsThroughputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "throughput", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionsThroughputResponse {
    return new TransactionsThroughputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionsThroughputResponse {
    return new TransactionsThroughputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionsThroughputResponse {
    return new TransactionsThroughputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionsThroughputResponse | PlainMessage<TransactionsThroughputResponse> | undefined, b: TransactionsThroughputResponse | PlainMessage<TransactionsThroughputResponse> | undefined): boolean {
    return proto3.util.equals(TransactionsThroughputResponse, a, b);
  }
}


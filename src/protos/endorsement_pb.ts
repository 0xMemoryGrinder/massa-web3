// Copyright (c) 2023 MASSA LABS <info@massa.net>

// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts+dts"
// @generated from file endorsement.proto (package massa.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Slot } from "./slot_pb.js";

/**
 * An endorsement, as sent in the network
 *
 * @generated from message massa.api.v1.Endorsement
 */
export class Endorsement extends Message<Endorsement> {
  /**
   * Slot in which the endorsement can be included
   *
   * @generated from field: massa.api.v1.Slot slot = 1;
   */
  slot?: Slot;

  /**
   * Endorsement index inside the including block
   *
   * @generated from field: fixed32 index = 2;
   */
  index = 0;

  /**
   * Hash of endorsed block
   * This is the parent in thread `self.slot.thread` of the block in which the endorsement is included
   *
   * @generated from field: string endorsed_block = 3;
   */
  endorsedBlock = "";

  constructor(data?: PartialMessage<Endorsement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.Endorsement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "message", T: Slot },
    { no: 2, name: "index", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "endorsed_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Endorsement {
    return new Endorsement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Endorsement {
    return new Endorsement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Endorsement {
    return new Endorsement().fromJsonString(jsonString, options);
  }

  static equals(a: Endorsement | PlainMessage<Endorsement> | undefined, b: Endorsement | PlainMessage<Endorsement> | undefined): boolean {
    return proto3.util.equals(Endorsement, a, b);
  }
}

/**
 * Signed endorsement
 *
 * @generated from message massa.api.v1.SignedEndorsement
 */
export class SignedEndorsement extends Message<SignedEndorsement> {
  /**
   * Endorsement
   *
   * @generated from field: massa.api.v1.Endorsement content = 1;
   */
  content?: Endorsement;

  /**
   * A cryptographically generated value using `serialized_data` and a public key.
   *
   * @generated from field: string signature = 2;
   */
  signature = "";

  /**
   * The public-key component used in the generation of the signature
   *
   * @generated from field: string content_creator_pub_key = 3;
   */
  contentCreatorPubKey = "";

  /**
   * Derived from the same public key used to generate the signature
   *
   * @generated from field: string content_creator_address = 4;
   */
  contentCreatorAddress = "";

  /**
   * A secure hash of the data. See also [massa_hash::Hash]
   *
   * @generated from field: string id = 5;
   */
  id = "";

  constructor(data?: PartialMessage<SignedEndorsement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SignedEndorsement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Endorsement },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_creator_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content_creator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedEndorsement {
    return new SignedEndorsement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedEndorsement {
    return new SignedEndorsement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedEndorsement {
    return new SignedEndorsement().fromJsonString(jsonString, options);
  }

  static equals(a: SignedEndorsement | PlainMessage<SignedEndorsement> | undefined, b: SignedEndorsement | PlainMessage<SignedEndorsement> | undefined): boolean {
    return proto3.util.equals(SignedEndorsement, a, b);
  }
}


// Copyright (c) 2023 MASSA LABS <info@massa.net>

// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts+dts"
// @generated from file operation.proto (package massa.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BytesMapFieldEntry } from "./common_pb.js";

/**
 * The operation as sent in the network
 *
 * @generated from message massa.api.v1.Operation
 */
export class Operation extends Message<Operation> {
  /**
   * The fee they have decided for this operation
   *
   * @generated from field: fixed64 fee = 1;
   */
  fee = protoInt64.zero;

  /**
   * After `expire_period` slot the operation won't be included in a block
   *
   * @generated from field: fixed64 expire_period = 2;
   */
  expirePeriod = protoInt64.zero;

  /**
   * The type specific operation part
   *
   * @generated from field: massa.api.v1.OperationType op = 3;
   */
  op?: OperationType;

  constructor(data?: PartialMessage<Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 2, name: "expire_period", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 3, name: "op", kind: "message", T: OperationType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation {
    return new Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJsonString(jsonString, options);
  }

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean {
    return proto3.util.equals(Operation, a, b);
  }
}

/**
 * Type specific operation content
 *
 * @generated from message massa.api.v1.OperationType
 */
export class OperationType extends Message<OperationType> {
  /**
   * Transfer coins from sender to recipient
   *
   * @generated from field: massa.api.v1.Transaction transaction = 1;
   */
  transaction?: Transaction;

  /**
   * The sender buys `roll_count` rolls. Roll price is defined in configuration
   *
   * @generated from field: massa.api.v1.RollBuy roll_buy = 2;
   */
  rollBuy?: RollBuy;

  /**
   * The sender sells `roll_count` rolls. Roll price is defined in configuration
   *
   * @generated from field: massa.api.v1.RollSell roll_sell = 3;
   */
  rollSell?: RollSell;

  /**
   * Execute a smart contract
   *
   * @generated from field: massa.api.v1.ExecuteSC execut_sc = 4;
   */
  executSc?: ExecuteSC;

  /**
   * Calls an exported function from a stored smart contract
   *
   * @generated from field: massa.api.v1.CallSC call_sc = 5;
   */
  callSc?: CallSC;

  constructor(data?: PartialMessage<OperationType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.OperationType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: Transaction },
    { no: 2, name: "roll_buy", kind: "message", T: RollBuy },
    { no: 3, name: "roll_sell", kind: "message", T: RollSell },
    { no: 4, name: "execut_sc", kind: "message", T: ExecuteSC },
    { no: 5, name: "call_sc", kind: "message", T: CallSC },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationType {
    return new OperationType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationType {
    return new OperationType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationType {
    return new OperationType().fromJsonString(jsonString, options);
  }

  static equals(a: OperationType | PlainMessage<OperationType> | undefined, b: OperationType | PlainMessage<OperationType> | undefined): boolean {
    return proto3.util.equals(OperationType, a, b);
  }
}

/**
 * Transfer coins from sender to recipient
 *
 * @generated from message massa.api.v1.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * Recipient address
   *
   * @generated from field: string recipient_address = 1;
   */
  recipientAddress = "";

  /**
   * Amount
   *
   * @generated from field: fixed64 amount = 2;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * The sender buys `roll_count` rolls. Roll price is defined in configuration
 *
 * @generated from message massa.api.v1.RollBuy
 */
export class RollBuy extends Message<RollBuy> {
  /**
   * Roll count
   *
   * @generated from field: fixed64 roll_count = 1;
   */
  rollCount = protoInt64.zero;

  constructor(data?: PartialMessage<RollBuy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.RollBuy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roll_count", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollBuy {
    return new RollBuy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollBuy {
    return new RollBuy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollBuy {
    return new RollBuy().fromJsonString(jsonString, options);
  }

  static equals(a: RollBuy | PlainMessage<RollBuy> | undefined, b: RollBuy | PlainMessage<RollBuy> | undefined): boolean {
    return proto3.util.equals(RollBuy, a, b);
  }
}

/**
 * The sender sells `roll_count` rolls. Roll price is defined in configuration
 *
 * @generated from message massa.api.v1.RollSell
 */
export class RollSell extends Message<RollSell> {
  /**
   * Roll count
   *
   * @generated from field: fixed64 roll_count = 1;
   */
  rollCount = protoInt64.zero;

  constructor(data?: PartialMessage<RollSell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.RollSell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roll_count", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollSell {
    return new RollSell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollSell {
    return new RollSell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollSell {
    return new RollSell().fromJsonString(jsonString, options);
  }

  static equals(a: RollSell | PlainMessage<RollSell> | undefined, b: RollSell | PlainMessage<RollSell> | undefined): boolean {
    return proto3.util.equals(RollSell, a, b);
  }
}

/**
 * Execute a smart contract
 *
 * @generated from message massa.api.v1.ExecuteSC
 */
export class ExecuteSC extends Message<ExecuteSC> {
  /**
   * Smart contract bytecode.
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * The maximum amount of gas that the execution of the contract is allowed to cost
   *
   * @generated from field: fixed64 max_gas = 2;
   */
  maxGas = protoInt64.zero;

  /**
   * A key-value store associating a hash to arbitrary bytes
   *
   * @generated from field: repeated massa.api.v1.BytesMapFieldEntry datastore = 3;
   */
  datastore: BytesMapFieldEntry[] = [];

  constructor(data?: PartialMessage<ExecuteSC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.ExecuteSC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "max_gas", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 3, name: "datastore", kind: "message", T: BytesMapFieldEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteSC {
    return new ExecuteSC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteSC {
    return new ExecuteSC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteSC {
    return new ExecuteSC().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteSC | PlainMessage<ExecuteSC> | undefined, b: ExecuteSC | PlainMessage<ExecuteSC> | undefined): boolean {
    return proto3.util.equals(ExecuteSC, a, b);
  }
}

/**
 * Calls an exported function from a stored smart contract
 *
 * @generated from message massa.api.v1.CallSC
 */
export class CallSC extends Message<CallSC> {
  /**
   * Target smart contract address
   *
   * @generated from field: string target_addr = 1;
   */
  targetAddr = "";

  /**
   * Target function name. No function is called if empty
   *
   * @generated from field: string target_func = 2;
   */
  targetFunc = "";

  /**
   * Parameter to pass to the target function
   *
   * @generated from field: bytes param = 3;
   */
  param = new Uint8Array(0);

  /**
   * The maximum amount of gas that the execution of the contract is allowed to cost
   *
   * @generated from field: fixed64 max_gas = 4;
   */
  maxGas = protoInt64.zero;

  /**
   * Extra coins that are spent from the caller's balance and transferred to the target
   *
   * @generated from field: fixed64 coins = 5;
   */
  coins = protoInt64.zero;

  constructor(data?: PartialMessage<CallSC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.CallSC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_func", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "param", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "max_gas", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 5, name: "coins", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallSC {
    return new CallSC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallSC {
    return new CallSC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallSC {
    return new CallSC().fromJsonString(jsonString, options);
  }

  static equals(a: CallSC | PlainMessage<CallSC> | undefined, b: CallSC | PlainMessage<CallSC> | undefined): boolean {
    return proto3.util.equals(CallSC, a, b);
  }
}

/**
 * Signed operation
 *
 * @generated from message massa.api.v1.SignedOperation
 */
export class SignedOperation extends Message<SignedOperation> {
  /**
   * Operation
   *
   * @generated from field: massa.api.v1.Operation content = 1;
   */
  content?: Operation;

  /**
   * A cryptographically generated value using `serialized_data` and a public key.
   *
   * @generated from field: string signature = 2;
   */
  signature = "";

  /**
   * The public-key component used in the generation of the signature
   *
   * @generated from field: string content_creator_pub_key = 3;
   */
  contentCreatorPubKey = "";

  /**
   * Derived from the same public key used to generate the signature
   *
   * @generated from field: string content_creator_address = 4;
   */
  contentCreatorAddress = "";

  /**
   * A secure hash of the data. See also [massa_hash::Hash]
   *
   * @generated from field: string id = 5;
   */
  id = "";

  constructor(data?: PartialMessage<SignedOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "massa.api.v1.SignedOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Operation },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_creator_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content_creator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedOperation {
    return new SignedOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedOperation {
    return new SignedOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedOperation {
    return new SignedOperation().fromJsonString(jsonString, options);
  }

  static equals(a: SignedOperation | PlainMessage<SignedOperation> | undefined, b: SignedOperation | PlainMessage<SignedOperation> | undefined): boolean {
    return proto3.util.equals(SignedOperation, a, b);
  }
}

